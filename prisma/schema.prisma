// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String
  password          String
  email             String             @unique
  role              Role
  token             String
  active            Boolean            @default(false) // Trạng thái tài khoản
  avatar            String // Link đến avatar (nếu cần)
  phone             String? // Số điện thoại (nếu cần)
  address           String? // Địa chỉ (nếu cần)
  status            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Lecturer          Lecturer?
  Student           Student?
  VerificationCodes VerificationCode[]

  @@map("users")
}

// Enum cho vai trò
enum Role {
  LECTURER // Giảng viên
  STUDENT // Sinh viên
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int // ID người dùng liên kết
  code      String // Mã xác thực
  createdAt DateTime @default(now()) // Thời gian tạo mã
  expiresAt DateTime // Thời gian hết hạn (nếu cần)
  used      Boolean  @default(false) // Mã đã được sử dụng chưa

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model Lecturer {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes     Class[]
  assignments Assignment[]

  @@map("lecturers")
}

model Student {
  id           Int                    @id @default(autoincrement())
  userId       Int                    @unique
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes      Class[]                @relation("StudentClasses")
  assignments  AssignmentSubmission[]
  attendance   AttendanceStatus[]
  LeaveRequest LeaveRequest[]

  @@map("students")
}

model Class {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  semester      String
  type          ClassType
  maxStudents   Int
  lecturerId    Int
  lecturer      Lecturer        @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  students      Student[]       @relation("StudentClasses")
  schedule      DateTime[]
  timeStart     DateTime
  timeEnd       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  open          Boolean         @default(true)
  assignments   Assignment[]
  attendance    Attendance[]
  StudyMaterial StudyMaterial[]
  LeaveRequest  LeaveRequest[]

  @@map("classes")
}

enum ClassType {
  LT
  BT
  TN
  LT_BT
}

model Assignment {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  lecturerId  Int
  lecturer    Lecturer               @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  classId     Int
  class       Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  dueDate     DateTime
  submissions AssignmentSubmission[]
  graded      Boolean                @default(false)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("assignments")
}

model AssignmentSubmission {
  id           Int        @id @default(autoincrement())
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  grade        Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("assignment_submissions")
}

model Attendance {
  id      Int                @id @default(autoincrement())
  classId Int
  class   Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  date    DateTime
  records AttendanceStatus[]

  @@map("attendances")
}

model AttendanceStatus {
  id           Int            @id @default(autoincrement())
  studentId    Int
  student      Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attendanceId Int
  attendance   Attendance     @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  status       PresenceStatus

  @@map("attendance_status")
}

enum PresenceStatus {
  CO_MAT
  VANG_CO_PHEP
  VANG_KHONG_PHEP
}

model StudyMaterial {
  id          Int          @id @default(autoincrement())
  classId     Int
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String
  type        MaterialType

  @@map("study_materials")
}

enum MaterialType {
  BAI_GIANG
  BAI_DOC_THEM
  VIDEO_HUONG_DAN
}

model LeaveRequest {
  id           Int         @id @default(autoincrement())
  studentId    Int
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId      Int
  class        Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  reason       String
  status       LeaveStatus
  requestTime  DateTime    @default(now())
  responseTime DateTime?

  @@map("leave_requests")
}

enum LeaveStatus {
  DANG_XU_LY
  DA_DUYET
  TU_CHOI
}
