// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                @id @default(autoincrement())
  username              String
  password              String
  email                 String             @unique
  role                  Role
  token                 String
  active                Boolean            @default(false) // Trạng thái tài khoản
  avatar                String // Link đến avatar (nếu cần)
  phone                 String? // Số điện thoại (nếu cần)
  address               String? // Địa chỉ (nếu cần)
  status                Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  Lecturer              Lecturer?
  Student               Student?
  VerificationCodes     VerificationCode[]
  Notifications         Notification[]
  sentConversations     Conversation[]     @relation("Sender") // Danh sách cuộc trò chuyện đã gửi
  receivedConversations Conversation[]     @relation("Receiver") // Danh sách cuộc trò chuyện đã nhận
  messages              Message[] // Danh sách tin nhắn gửi bởi người dùng

  @@map("users")
}

// Enum cho vai trò
enum Role {
  LECTURER // Giảng viên
  STUDENT // Sinh viên
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int // ID người dùng liên kết
  code      String // Mã xác thực
  createdAt DateTime @default(now()) // Thời gian tạo mã
  expiresAt DateTime // Thời gian hết hạn (nếu cần)
  used      Boolean  @default(false) // Mã đã được sử dụng chưa

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model Lecturer {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes     Class[]
  assignments Assignment[]

  @@map("lecturers")
}

model Student {
  id             Int                    @id @default(autoincrement())
  userId         Int                    @unique
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes        Class[]                @relation("StudentClasses")
  assignments    AssignmentSubmission[]
  attendance     AttendanceStatus[]
  AbsenceRequest AbsenceRequest[]

  @@map("students")
}

model Class {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  semester       String
  type           ClassType
  maxStudents    Int
  lecturerId     Int
  lecturer       Lecturer         @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  students       Student[]        @relation("StudentClasses")
  timeStart      DateTime
  timeEnd        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  open           Boolean          @default(true)
  sessions       ClassSession[]
  assignments    Assignment[]
  attendance     Attendance[]
  StudyMaterial  StudyMaterial[]
  AbsenceRequest AbsenceRequest[]

  @@map("classes")
}

model ClassSession {
  id        Int    @id @default(autoincrement())
  classId   Int // ID lớp học liên kết
  class     Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  dayOfWeek String // Ngày trong tuần (ví dụ: "Thứ 4", "Thứ 6")
  startTime String // Giờ bắt đầu (ví dụ: "12h30")
  endTime   String // Giờ kết thúc (ví dụ: "14h30")

  @@map("class_sessions")
}

enum ClassType {
  LT
  BT
  TN
  LT_BT
}

model Assignment {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  link        String?
  lecturerId  Int
  lecturer    Lecturer               @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  classId     Int
  class       Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  dueDate     DateTime?
  submissions AssignmentSubmission[]
  graded      Float?                 @default(10)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("assignments")
}

model AssignmentSubmission {
  id           Int        @id @default(autoincrement())
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  grade        Float?
  text         String?
  link         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("assignment_submissions")
}

model Attendance {
  id      Int                @id @default(autoincrement())
  classId Int
  class   Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  date    DateTime
  records AttendanceStatus[]

  @@map("attendances")
}

model AttendanceStatus {
  id           Int            @id @default(autoincrement())
  studentId    Int
  student      Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attendanceId Int
  attendance   Attendance     @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  status       PresenceStatus

  @@map("attendance_status")
}

enum PresenceStatus {
  CO_MAT
  VANG_MAT
}

model StudyMaterial {
  id          Int          @id @default(autoincrement())
  classId     Int
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  title       String
  description String?
  link        String
  type        MaterialType

  @@map("study_materials")
}

enum MaterialType {
  BAI_GIANG
  BAI_DOC_THEM
  VIDEO_HUONG_DAN
}

model AbsenceRequest {
  id           Int         @id @default(autoincrement())
  studentId    Int
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId      Int
  class        Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  reason       String
  status       LeaveStatus
  date         DateTime
  responseTime DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("leave_requests")
}

enum LeaveStatus {
  DANG_XU_LY
  DA_DUYET
  TU_CHOI
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int // ID của người dùng nhận thông báo
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String // Nội dung thông báo
  type      String // Loại thông báo (ví dụ: nghỉ học, điểm bài kiểm tra, ...)
  relatedId Int? // ID liên quan đến thông báo (nếu cần)
  read      Boolean  @default(false) // Trạng thái đã đọc
  createdAt DateTime @default(now()) // Thời gian tạo thông báo

  @@map("notifications")
}

model Conversation {
  id              Int       @id @default(autoincrement())
  senderId        Int // Người gửi tin nhắn
  sender          User      @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId      Int // Người nhận tin nhắn
  receiver        User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderBlocked   Boolean   @default(false) // Người nhận đã chặn người gửi
  receiverBlocked Boolean   @default(false) // Người gửi đã chặn người nhận
  messages        Message[] // Danh sách tin nhắn
  createdAt       DateTime  @default(now()) // Thời gian tạo
  updatedAt       DateTime  @updatedAt // Thời gian cập nhật gần nhất

  @@unique([senderId, receiverId]) // Đảm bảo mỗi cặp chỉ có một cuộc trò chuyện
  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int // ID của cuộc trò chuyện
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       Int // Người gửi tin nhắn
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content        String // Nội dung tin nhắn
  fileUrl        String? // Link đến file đính kèm (nếu có)
  read           Boolean      @default(false) // Trạng thái đã đọc
  createdAt      DateTime     @default(now()) // Thời gian gửi tin nhắn

  @@map("messages")
}
